# global to spell OFF in a single operation
X = [255, 255, 255]  # white
O = [  0,   0,   0]  # black

def ibm_qx5_func():
    return [[40,41,48,49],[8,9,16,17],[28,29,36,37],[6,7,14,15],[54,55,62,63]]

def ibm_qx5t_func():
    return [[0,1,8,9],[3,4,11,12],[6,7,14,15],[27,28,35,36],[51,52,59,60]] 

def ibm_qxhex_func():
    return [                [3],
                        [10],   [12],
                    [17],            [21],
                [24],                      [30],
                    [33],            [37],
                        [42],   [44],
                            [51] ]

def ibm_qx16_func():
    return [[63],[54],[61],[52],[59],[50],[57],[48],
            [7],[14],[5],[12],[3],[10],[1],[8]]
            #[[0],[9],[2],[11],[4],[13],[6],[15],
            #[56],[49],[58],[51],[60],[53],[62],[55]]

def off_func(): return [
   O, O, O, O, O, O, O, O,
   O, X, O, X, X, O, X, X,
   X, O, X, X, O, O, X, O,
   X, O, X, X, X, O, X, X,
   X, O, X, X, O, O, X, O,
   O, X, O, X, O, O, X, O,
   O, O, O, O, O, O, O, O,
   O, O, O, O, O, O, O, O,
   ]

def Qlogo_func(): return [
   O, O, O, X, X, O, O, O,
   O, O, X, O, O, X, O, O,
   O, O, X, O, O, X, O, O,
   O, O, X, O, O, X, O, O,
   O, O, X, O, O, X, O, O,
   O, O, O, X, X, O, O, O,
   O, O, O, O, X, O, O, O,
   O, O, O, X, X, O, O, O,
   ]


def QLarray_func(): return [
              [3],[4],
         [10],       [13],
         [18],       [21],
         [26],       [29],
         [34],       [37],
             [43],[44],
                  [52],
             [59],[60]
    ]

def QArcs_func(): return [
   O, O, O, O, O, O, X, O,
   O, O, O, O, X, X, X, X,
   O, O, X, X, O, O, X, O,
   O, O, X, O, O, O, X, O,
   O, X, O, O, O, X, X, O,
   O, X, O, O, X, X, O, O,
   X, X, X, X, O, O, O, O,
   O, X, O, O, O, O, O, O,
   ]

def QArcsArray_func(): return [
                            [6]    ,
                  [12],[13],[14],[15],
        [18],[19],          [22], 
        [26],               [30],
    [33],              [37],
    [41],         [44],[45],
   [48],[49],[50],[51],
        [57]
   ]

def QKLogo_func(): return [
   O, O, X, X, X, X, O, O,
   O, X, X, O, O, X, X, O,
   X, X, X, O, O, X, X, X,
   X, X, O, X, X, O, X, X,
   X, X, O, O, O, O, X, X,
   X, O, X, X, X, X, O, X,
   O, X, O, O, O, O, X, O,
   O, O, X, X, X, X, O, O,
   ]
def QKLogo_mask_func(): return [
              [2], [3],  [4], [5],
              
         [9],[10],           [13],[14],
         
    [16],[17],[18],          [21],[22],[23], 
    
    [24],[25],     [27],[28],          [31],
    
    [32],[33],                    [38],[39],
    
    [40],     [42],[43], [44],[45],    [47],
   
         [49],                    [54],
         
              [58],[59],[60],[61]
   ]
def QHex_func(): return [
        O, O, O, X, O, O, O, O,
        O, O, X, O, X, O, O, O,
        O, X, O, O, O, X, O, O,
        X, O, O, O, O, O, X, O,                 
        O, X, O, O, O, X, O, O,
        O, O, X, O, X, O, O, O,
        O, O, O, X, O, O, O, O,
        O, O, O, O, O, O, O, O,
        ]

def Arrow_func(): return [
   O, O, O, X, O, O, O, O,
   O, O, X, X, X, O, O, O,
   O, X, O, X, O, X, O, O,
   X, O, O, X, O, O, X, O,
   O, O, O, X, O, O, O, O,
   O, O, O, X, O, O, O, O,
   O, O, O, X, O, O, O, O,
   O, O, O, X, O, O, O, O,
   ]

def hues_func():
    return [
    0.00, 0.00, 0.06, 0.13, 0.20, 0.27, 0.34, 0.41,
    0.00, 0.06, 0.13, 0.21, 0.28, 0.35, 0.42, 0.49,
    0.07, 0.14, 0.21, 0.28, 0.35, 0.42, 0.50, 0.57,
    0.15, 0.22, 0.29, 0.36, 0.43, 0.50, 0.57, 0.64,
    0.22, 0.29, 0.36, 0.44, 0.51, 0.58, 0.65, 0.72,
    0.30, 0.37, 0.44, 0.51, 0.58, 0.66, 0.73, 0.80,
    0.38, 0.45, 0.52, 0.59, 0.66, 0.73, 0.80, 0.87,
    0.45, 0.52, 0.60, 0.67, 0.74, 0.81, 0.88, 0.95,
    ]

def RQ2_array_indices_func():
    return {
    0: 32, 1: 39, 2: 40, 3: 47, 4: 48, 5: 55, 6: 56, 7: 63,
    8: 33, 9: 38, 10: 41, 11: 46, 12: 49, 13: 54, 14: 57, 15: 62,
    16: 34, 17: 37, 18: 42, 19: 45, 20: 50, 21: 53, 22: 58, 23: 61,
    24: 35, 25: 36, 26: 43, 27: 44, 28: 51, 29: 52, 30: 59, 31: 60,
    32: 156, 33: 155, 34: 148, 35: 147, 36: 140, 37: 139, 38: 132, 39: 131,
    40: 157, 41: 154, 42: 149, 43: 146, 44: 141, 45: 138, 46: 133, 47: 130,
    48: 158, 49: 153, 50: 150, 51: 145, 52: 142, 53: 137, 54: 134, 55: 129,
    56: 159, 57: 152, 58: 151, 59: 144, 60: 143, 61: 136, 62: 135, 63: 128,
}

def LED8x32_indices_func():
    return {
    0: 32, 1: 39, 2: 40, 3: 47, 4: 48, 5: 55, 6: 56, 7: 63,
    8: 33, 9: 38, 10: 41, 11: 46, 12: 49, 13: 54, 14: 57, 15: 62,
    16: 34, 17: 37, 18: 42, 19: 45, 20: 50, 21: 53, 22: 58, 23: 61,
    24: 35, 25: 36, 26: 43, 27: 44, 28: 51, 29: 52, 30: 59, 31: 60,
    32: 156, 33: 155, 34: 148, 35: 147, 36: 140, 37: 139, 38: 132, 39: 131,
    40: 157, 41: 154, 42: 149, 43: 146, 44: 141, 45: 138, 46: 133, 47: 130,
    48: 158, 49: 153, 50: 150, 51: 145, 52: 142, 53: 137, 54: 134, 55: 129,
    56: 159, 57: 152, 58: 151, 59: 144, 60: 143, 61: 136, 62: 135, 63: 128,
}